generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String        @id @default(uuid())
  email        String        @unique
  name         String
  password     String
  createdAt    DateTime      @default(now()) @map("created_at")
  updatedAt    DateTime      @updatedAt @map("updated_at")
  deletedAt    DateTime?     @map("deleted_at")
  isActive     Boolean       @default(true) @map("is_active")
  isAdmin      Boolean       @default(false) @map("is_admin")
  categories   Category[]    // Cada usuário tem suas próprias categorias
  accounts     Account[]     // Cada usuário pode ter várias contas

  @@map("users")
}

model Account {
  id           String        @id @default(uuid())
  name         String
  description  String?
  createdAt    DateTime      @default(now()) @map("created_at")
  updatedAt    DateTime?     @updatedAt @map("updated_at")
  deletedAt    DateTime?     @map("deleted_at")
  isActive     Boolean       @default(true) @map("is_active")
  userId       String        @map("user_id")
  user         User          @relation(fields: [userId], references: [id])
  transactions Transaction[] // Cada conta pode ter várias transações

  @@map("accounts")
}

model Transaction {
  id           String          @id @default(uuid())
  amount       Decimal
  description  String?
  date         DateTime
  accountId    String          @map("account_id") // Associa a transação a uma conta
  categoryId   String?         @map("category_id") // Categoria da transação
  createdAt    DateTime        @default(now()) @map("created_at")
  updatedAt    DateTime?       @updatedAt @map("updated_at")
  deletedAt    DateTime?       @map("deleted_at")
  isActive     Boolean         @default(true) @map("is_active")
  type         TransactionType
  installments Installment[]   // Várias parcelas para uma transação
  category     Category?       @relation(fields: [categoryId], references: [id])
  account      Account         @relation(fields: [accountId], references: [id])

  @@map("transactions")
}

model Category {
  id           String        @id @default(uuid())
  name         String
  description  String?
  createdAt    DateTime      @default(now()) @map("created_at")
  updatedAt    DateTime?     @updatedAt @map("updated_at")
  userId       String        @map("user_id") // Cada categoria pertence a um usuário
  deletedAt    DateTime?     @map("deleted_at")
  isActive     Boolean       @default(true) @map("is_active")
  user         User          @relation(fields: [userId], references: [id])
  transactions Transaction[] // Cada categoria pode ser usada por várias transações

  @@map("categories")
}

model Installment {
  id            String      @id @default(uuid())
  amount        Decimal
  dueDate       DateTime    @map("due_date")
  status        String
  transactionId String      @map("transaction_id") // Parcela associada à transação
  createdAt     DateTime    @default(now()) @map("created_at")
  updatedAt     DateTime?   @updatedAt @map("updated_at")
  deletedAt     DateTime?   @map("deleted_at")
  isActive      Boolean     @default(true) @map("is_active")
  transaction   Transaction @relation(fields: [transactionId], references: [id])

  @@map("installments")
}

enum TransactionType {
  INCOME
  EXPENSE
}
